using Arrowgene.Ddon.GameServer.Characters;
using Arrowgene.Ddon.Server;
using Arrowgene.Ddon.Server.Network;
using Arrowgene.Ddon.Shared.Entity.PacketStructure;
using Arrowgene.Ddon.Shared.Entity.Structure;
using Arrowgene.Ddon.Shared.Model;
using Arrowgene.Ddon.Shared.Network;
using Arrowgene.Logging;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Arrowgene.Ddon.GameServer.Handler
{
    public class QuestPlayStartHandler : StructurePacketHandler<GameClient, C2SQuestPlayerStartReq>
    {
        private static readonly ServerLogger Logger = LogProvider.Logger<ServerLogger>(typeof(QuestPlayStartHandler));

        private DdonGameServer _Server;

        public QuestPlayStartHandler(DdonGameServer server) : base(server)
        {
            _Server = server;
        }

        public override void Handle(GameClient client, StructurePacket<C2SQuestPlayerStartReq> request)
        {
            client.Send(new S2CQuestPlayerStartRes());

            var pcap1 = new S2CQuestTimeGainQuestPlayStartNtc.Serializer().Read(pcap1_data);
            var quest = QuestManager.GetQuest(request.Structure.QuestScheduleId);
            if (quest != null)
            {
                client.Party.QuestState.AddNewQuest(quest);

                var groupId = _Server.ExmManager.GetContentIdForCharacter(client.Character);
                _Server.ExmManager.AddQuestToContent(groupId, quest);

                var ntc = new S2CQuestTimeGainQuestPlayStartNtc()
                {
                    TimeGainQuestPlayStartData = quest.ToCDataContentsPlayStartData()
                };
                // These next values come from rEndContentsSortieInfo.esi.json
                ntc.TimeGainQuestPlayStartData.QuestPhaseGroupIdList = quest.MissionParams.QuestPhaseGroupIdList;
                // ntc.TimeGainQuestPlayStartData.Unk3List.Add(new CDataCommonU8() { Value = 1 });
                client.Party.SendToAll(ntc);
                // TODO: Handle swapping/restricting items?
            }

            S2CItemSwitchStorageNtc missionItemsNtcs = new S2CItemSwitchStorageNtc()
            {
                IsStart = true,
                ChangeList = new List<CDataSwitchStorage>()
                {
                    new CDataSwitchStorage()
                    {
                        StorageType = StorageType.ItemBagConsumable,
                        Num = 10
                    }
                }
            };
            client.Party.SendToAll(missionItemsNtcs);


            foreach (var memberClient in client.Party.Clients)
            {
                S2CItemUpdateCharacterItemNtc itemNtc = new S2CItemUpdateCharacterItemNtc()
                {
                    UpdateType = ItemNoticeType.SwitchingStorage
                };

                ushort i = 0;
                foreach (var storageItem in memberClient.Character.Storage.GetStorage(StorageType.ItemBagConsumable).Items)
                {
                    ushort slot = (ushort)(i + 1);

                    i++;
                    if (storageItem == null)
                    {
                        continue;
                    }

                    var (item, amount) = storageItem;

                    itemNtc.UpdateItemList.Add(new CDataItemUpdateResult()
                    {
                        UpdateItemNum = -(int)amount,
                        ItemList = new CDataItemList()
                        {
                            ItemUId = item.UId,
                            ItemId = item.ItemId,
                            StorageType = StorageType.ItemBagConsumable,
                            SlotNo = slot,
                            ItemNum = amount
                        }
                    });
                    itemNtc.UpdateItemList.Add(new CDataItemUpdateResult()
                    {
                        UpdateItemNum = 0,
                        ItemList = new CDataItemList()
                        {
                            StorageType = StorageType.ItemBagConsumable,
                            SlotNo = slot,
                            ItemNum = 0
                        }
                    });
                }
                client.Send(itemNtc);
            }

            client.Party.ContentInProgress = true;
        }

        private static readonly byte[] pcap1_data = new byte[] { 0x00, 0x00, 0x01, 0xEB, 0x00, 0x04, 0xD1, 0x04, 0x03, 0x01, 0x0B, 0x08, 0x00, 0x00, 0x00, 0x64, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0xB3, 0x00, 0x00, 0x0C, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x7C, 0x00, 0x00, 0x21, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x0C, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x09, 0x00, 0x00, 0x14, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x14, 0xD6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x14, 0xC1, 0x04, 0x2C, 0xA2, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x14, 0xD6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x14, 0xC1, 0x04, 0x2C, 0xA2, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x01, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x01, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x01, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x01, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x21, 0xE0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x0C, 0x26, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x21, 0xE1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x0C, 0x26, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x21, 0xE2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x0C, 0x26, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        private static readonly byte[] pcap2_data = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x44, 0x00, 0x0D, 0x00, 0x06, 0x00, 0x1B, 0xE3, 0x81, 0x95, 0xE3, 0x81, 0x95, 0xE3, 0x81, 0x84, 0xE3, 0x81, 0xAA, 0xE7, 0x95, 0xB0, 0xE5, 0xA4, 0x89, 0xE3, 0x81, 0x8C, 0xE7, 0x99, 0xBA, 0xE7, 0x94, 0x9F, 0x44, 0x00, 0x0D, 0x00, 0x08, 0x00, 0x1B, 0xE3, 0x81, 0x95, 0xE3, 0x81, 0x95, 0xE3, 0x81, 0x84, 0xE3, 0x81, 0xAA, 0xE7, 0x95, 0xB0, 0xE5, 0xA4, 0x89, 0xE3, 0x81, 0x8C, 0xE7, 0x99, 0xBA, 0xE7, 0x94, 0x9F, 0x3F, 0x00, 0x03, 0x00, 0x02, 0x00, 0x1B, 0xE3, 0x81, 0x95, 0xE3, 0x81, 0x95, 0xE3, 0x81, 0x84, 0xE3, 0x81, 0xAA, 0xE7, 0x95, 0xB0, 0xE5, 0xA4, 0x89, 0xE3, 0x81, 0x8C, 0xE7, 0x99, 0xBA, 0xE7, 0x94, 0x9F, 0x44, 0x00, 0x0D, 0x00, 0x05, 0x00, 0x1B, 0xE3, 0x81, 0x95, 0xE3, 0x81, 0x95, 0xE3, 0x81, 0x84, 0xE3, 0x81, 0xAA, 0xE7, 0x95, 0xB0, 0xE5, 0xA4, 0x89, 0xE3, 0x81, 0x8C, 0xE7, 0x99, 0xBA, 0xE7, 0x94, 0x9F, 0x38, 0x16, 0x20, 0x00, 0x00, 0x00, 0x08, 0xE7, 0x00 };
    }
}
